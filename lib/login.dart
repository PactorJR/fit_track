import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Ensure this file is generated by the Firebase CLI for platform options.
import 'register.dart'; // Import RegisterPage from register.dart
import 'guest.dart';
import 'home_page.dart';
import 'home_page_admin.dart';
import 'main.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform, // Replace with actual Firebase options generated from CLI.
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'FitTrack CCAT',
      theme: ThemeData(
        primarySwatch: Colors.green,
      ),
      home: LoginPage(), // Your login page is the home screen.
    );
  }
}

class LoginPage extends StatefulWidget {
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _obscurePassword = true; // Variable to manage the visibility state of the password
  bool _isLoading = false; // Loading state
  String errorMessage = ''; // Variable to hold error messages

  // Method to toggle password visibility
  void _togglePasswordVisibility() {
    setState(() {
      _obscurePassword = !_obscurePassword;
    });
  }

  Future<void> _login() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true; // Show loading indicator
    });

    try {
      // Attempt to sign in with email and password
      UserCredential userCredential = await FirebaseAuth.instance.signInWithEmailAndPassword(
        email: _emailController.text,
        password: _passwordController.text,
      );

      // Check if the user exists in Firestore
      DocumentSnapshot userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(userCredential.user!.uid)
          .get();

      if (userDoc.exists) {
        // Get userType and userStatus from Firestore
        String userType = userDoc['userType'];
        String userStatus = userDoc['userStatus'];

        if (userStatus == 'On Approval') {
          // Show a dialog to inform the user they are on approval
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: Text('Approval Pending'),
              content: Text('Your account is pending approval by an Admin. Please wait until your account is set to active.'),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: Text('OK'),
                ),
              ],
            ),
          );
        } else {
          // Get the current date and time and format it
          String formattedDateTime = DateFormat('yyyy-MM-dd HH:mm:ss').format(DateTime.now());

          // Update lastLogin field in Firestore
          await FirebaseFirestore.instance
              .collection('users')
              .doc(userCredential.user!.uid)
              .update({'lastLogin': formattedDateTime});

          // Navigate to appropriate page based on userType
          if (userType == 'Admin') {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => MyAdminHomePage(title: 'FitTrack Home'), // Replace with your admin dashboard page
              ),
            );
          } else {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => MyHomePage(title: 'FitTrack Home'),
              ),
            );
          }
        }
      } else {
        // If user does not exist in Firestore, show an error
        setState(() {
          errorMessage = 'User not found in the database';
        });
      }
    } catch (e) {
      setState(() {
        errorMessage = e.toString();
      });
    } finally {
      setState(() {
        _isLoading = false; // Hide loading indicator
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Background image
          Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/images/bg.png'), // Replace with your actual background image path.
                fit: BoxFit.cover,
              ),
            ),
          ),

          // Login Form Content
          SafeArea(
            child: SingleChildScrollView(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  // Logo and Title
                  Column(
                    children: [
                      SizedBox(height: 50), // Added space from the top
                      Image.asset(
                        'assets/images/FitTrack_Icon.png', // Replace with the actual image path for your logo.
                        height: 250,
                      ),
                    ],
                  ),

                  // Email and Password input fields
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 32.0),
                    child: Form(
                      key: _formKey,
                      child: Column(
                        children: [
                          TextFormField(
                            controller: _emailController,
                            decoration: InputDecoration(
                              hintText: 'Enter email',
                              filled: true,
                              fillColor: Colors.white.withOpacity(0.8), // Make it slightly transparent
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(30),
                                borderSide: BorderSide(color: Colors.green),
                              ),
                            ),
                            keyboardType: TextInputType.emailAddress,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter your email';
                              }
                              return null;
                            },
                          ),
                          SizedBox(height: 20),
                          TextFormField(
                            controller: _passwordController,
                            obscureText: _obscurePassword, // Toggles between showing and hiding the password
                            decoration: InputDecoration(
                              hintText: 'Enter password',
                              filled: true,
                              fillColor: Colors.white.withOpacity(0.8), // Make it slightly transparent
                              suffixIcon: IconButton(
                                icon: Icon(
                                  _obscurePassword ? Icons.visibility : Icons.visibility_off,
                                ),
                                onPressed: _togglePasswordVisibility, // Toggles visibility when the icon is tapped
                              ),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(30),
                                borderSide: BorderSide(color: Colors.green),
                              ),
                            ),
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter your password';
                              }
                              return null;
                            },
                          ),
                        ],
                      ),
                    ),
                  ),

                  // Error Message
                  if (errorMessage.isNotEmpty)
                    Padding(
                      padding: const EdgeInsets.symmetric(vertical: 8.0),
                      child: Text(
                        errorMessage,
                        style: const TextStyle(color: Colors.red),
                      ),
                    ),

                  // Loading Indicator or Login Button
                  if (_isLoading)
                    Center(
                      child: CircularProgressIndicator(), // Loading indicator
                    )
                  else
                    Padding(
                      padding: const EdgeInsets.symmetric(vertical: 16.0), // Space between fields and button
                      child: ElevatedButton(
                        onPressed: _login,
                        style: ElevatedButton.styleFrom(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(30),
                          ),
                          backgroundColor: Colors.green,
                          padding: EdgeInsets.symmetric(horizontal: 80, vertical: 15),
                        ),
                        child: Text(
                          'Login',
                          style: const TextStyle(
                            color: Colors.black,
                          ),
                        ),
                      ),
                    ),

                  // Register and Guest Links
                  Column(
                    children: [
                      Padding(
                        padding: const EdgeInsets.only(bottom: 16.0), // Space between text and button
                        child: Text("Don't have an account yet?"),
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          TextButton(
                            onPressed: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(builder: (context) => RegisterPage()), // Navigate to RegisterPage
                              );
                            },
                            child: Text(
                              'Register here',
                              style: const TextStyle(
                                color: Colors.blue,
                              ),
                            ),
                          ),
                          Text('or'),
                          TextButton(
                            onPressed: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(builder: (context) => GuestPage()), // Navigate to GuestPage
                              );
                            },
                            child: Text(
                              'Continue as a Guest',
                              style: const TextStyle(
                                color: Colors.blue,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),

          // Permanent Floating Back Button
          Positioned(
            top: 40, // Position the button at the top
            left: 20, // Align to the left
            child: FloatingActionButton(
              mini: true, // Smaller back button
              backgroundColor: Colors.green,
              onPressed: () {
                // Navigate to MainPage
                Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(builder: (context) => MyAppMain()),
                );
              },
              child: const Icon(Icons.arrow_back, color: Colors.black),
            ),
          ),
        ],
      ),
    );
  }
}
